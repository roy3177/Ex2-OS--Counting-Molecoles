        -:    0:Source:molecule_requester.cpp
        -:    0:Graph:molecule_requester.gcno
        -:    0:Data:molecule_requester.gcda
        -:    0:Runs:2
        -:    1:#include <iostream>
        -:    2:#include <cstring>
        -:    3:#include <unistd.h>
        -:    4:#include <arpa/inet.h>
        -:    5:#include <sys/socket.h>
        -:    6:#include <sstream>
        -:    7:#include <netdb.h>
        -:    8:
        2:    9:int main(int argc, char *argv[])
        -:   10:{
        2:   11:    if (argc != 3)
        -:   12:    {
        1:   13:        std::cerr << "Usage: " << argv[0] << " <host> <port>\n";
        1:   14:        return 1;
        -:   15:    }
        -:   16:
        1:   17:    const char *server_ip = argv[1];
        1:   18:    int port = std::stoi(argv[2]);
        -:   19:
        -:   20:    // Create the UDP socket:
        1:   21:    int sock = socket(AF_INET, SOCK_DGRAM, 0);
        1:   22:    if (sock < 0)
        -:   23:    {
    #####:   24:        perror("socket failed");
    #####:   25:        return 1;
        -:   26:    }
        -:   27:
        1:   28:    struct addrinfo hints{}, *res;
        1:   29:    hints.ai_family = AF_INET;      // IPv4
        1:   30:    hints.ai_socktype = SOCK_DGRAM; // UDP
        -:   31:
        1:   32:    int status = getaddrinfo(server_ip, std::to_string(port).c_str(), &hints, &res);
        1:   33:    if (status != 0)
        -:   34:    {
    #####:   35:        std::cerr << "getaddrinfo error: " << gai_strerror(status) << "\n";
    #####:   36:        return 1;
        -:   37:    }
        -:   38:
        1:   39:    sockaddr_storage server_addr{};
        1:   40:    std::memcpy(&server_addr, res->ai_addr, res->ai_addrlen);
        1:   41:    socklen_t addr_len = res->ai_addrlen;
        -:   42:
        1:   43:    freeaddrinfo(res); // Clean up
        -:   44:
        -:   45:    while (true)
        -:   46:    {
        6:   47:        std::cout << "Enter command (DELIVER <MOLECULE> <AMOUNT> | EXIT): ";
        6:   48:        std::string command;
        6:   49:        std::getline(std::cin, command);
        -:   50:
        6:   51:        if (command == "EXIT")
        -:   52:        {
        1:   53:            std::cout << "Exiting.\n";
        1:   54:            break;
        -:   55:        }
        -:   56:
        -:   57:        // Send the command to the server:
        5:   58:        ssize_t sent = sendto(sock, command.c_str(), command.size(), 0,
        -:   59:                              (sockaddr *)&server_addr, sizeof(server_addr));
        5:   60:        if (sent < 0)
        -:   61:        {
    #####:   62:            perror("sendto failed");
    #####:   63:            break;
        -:   64:        }
        -:   65:
        -:   66:        // Get response from the server:
        5:   67:        char buffer[1024] = {0};
        5:   68:        socklen_t len = sizeof(server_addr);
        5:   69:        ssize_t received = recvfrom(sock, buffer, sizeof(buffer) - 1, 0,
        -:   70:                                    (sockaddr *)&server_addr, &len);
        5:   71:        if (received < 0)
        -:   72:        {
    #####:   73:            perror("recvfrom failed");
    #####:   74:            break;
        -:   75:        }
        -:   76:
        5:   77:        buffer[received] = '\0';
        5:   78:        std::cout << "[Server Reply] " << buffer << "\n";
       11:   79:    }
        -:   80:
        1:   81:    close(sock);
        1:   82:    return 0;
        -:   83:}
