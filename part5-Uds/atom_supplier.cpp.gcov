        -:    0:Source:atom_supplier.cpp
        -:    0:Graph:atom_supplier.gcno
        -:    0:Data:atom_supplier.gcda
        -:    0:Runs:3
        -:    1:#include <iostream>
        -:    2:#include <cstring>
        -:    3:#include <unistd.h>
        -:    4:#include <arpa/inet.h>
        -:    5:#include <sys/socket.h>
        -:    6:#include <getopt.h>
        -:    7:#include <sys/un.h>
        -:    8:#include <netdb.h>
        -:    9:
        3:   10:int main(int argc, char *argv[])
        -:   11:{
        -:   12:
        3:   13:    std::string host;
        3:   14:    int port = -1;
        3:   15:    std::string uds_path;
        -:   16:    int opt;
        -:   17:
        4:   18:    while ((opt = getopt(argc, argv, "f:")) != -1)
        -:   19:    {
        1:   20:        switch (opt)
        -:   21:        {
        1:   22:        case 'f':
        1:   23:            uds_path = optarg;
        1:   24:            break;
        -:   25:
    #####:   26:        default:
    #####:   27:            std::cerr << "Usage: " << argv[0] << " <host> <port> | -f <uds_path>\n";
    #####:   28:            return 1;
        -:   29:        }
        -:   30:    }
        -:   31:
        3:   32:    bool use_uds = !uds_path.empty();
        3:   33:    if (!use_uds)
        -:   34:    {
        2:   35:        if (optind + 2 > argc)
        -:   36:        {
    #####:   37:            std::cerr << "Usage: " << argv[0] << " <host> <port> | -f <uds_path>\n";
    #####:   38:            return 1;
        -:   39:        }
        2:   40:        host = argv[optind];
        4:   41:        port = std::stoi(argv[optind + 1]);
        -:   42:    }
        -:   43:
        -:   44:    int sock;
        3:   45:    if (use_uds)
        -:   46:    {
        1:   47:        sock = socket(AF_UNIX, SOCK_STREAM, 0);
        1:   48:        if (sock < 0)
        -:   49:        {
    #####:   50:            perror("socket failed");
    #####:   51:            return 1;
        -:   52:        }
        -:   53:
        1:   54:        sockaddr_un addr{};
        1:   55:        addr.sun_family = AF_UNIX;
        1:   56:        std::strncpy(addr.sun_path, uds_path.c_str(), sizeof(addr.sun_path) - 1);
        -:   57:
        1:   58:        if (connect(sock, (sockaddr *)&addr, sizeof(addr)) < 0)
        -:   59:        {
    #####:   60:            perror("connect failed");
    #####:   61:            return 1;
        -:   62:        }
        -:   63:
        1:   64:        std::cout << "Connected to server via UDS at " << uds_path << "\n";
        -:   65:    }
        -:   66:
        -:   67:    else
        -:   68:    {
        2:   69:        sock = socket(AF_INET, SOCK_STREAM, 0);
        2:   70:        if (sock < 0)
        -:   71:        {
    #####:   72:            perror("socket failed");
    #####:   73:            return 1;
        -:   74:        }
        -:   75:
        2:   76:        addrinfo hints{}, *res;
        2:   77:        memset(&hints, 0, sizeof(hints));
        2:   78:        hints.ai_family = AF_INET;
        2:   79:        hints.ai_socktype = SOCK_STREAM;
        -:   80:
        2:   81:        int status = getaddrinfo(host.c_str(), std::to_string(port).c_str(), &hints, &res);
        2:   82:        if (status != 0)
        -:   83:        {
    #####:   84:            std::cerr << "getaddrinfo: " << gai_strerror(status) << "\n";
    #####:   85:            return 1;
        -:   86:        }
        -:   87:
        2:   88:        sock = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
        2:   89:        if (sock < 0)
        -:   90:        {
    #####:   91:            perror("socket failed");
    #####:   92:            freeaddrinfo(res);
    #####:   93:            return 1;
        -:   94:        }
        -:   95:
        2:   96:        if (connect(sock, res->ai_addr, res->ai_addrlen) < 0)
        -:   97:        {
    #####:   98:            perror("Connection failed");
    #####:   99:            freeaddrinfo(res);
    #####:  100:            return 1;
        -:  101:        }
        -:  102:
        2:  103:        std::cout << "Connected to server at " << host << ":" << port << "\n";
        2:  104:        freeaddrinfo(res);
        -:  105:    }
        -:  106:
        -:  107:    while (true)
        -:  108:    {
        -:  109:        // Request a command from the user:
       12:  110:        std::cout << "Enter command (e.g., ADD HYDROGEN 3 or EXIT): ";
       12:  111:        std::string command;
       12:  112:        std::getline(std::cin, command);
        -:  113:
        -:  114:        // EXIT --> Terminates the program:
       12:  115:        if (command == "EXIT")
        -:  116:        {
        2:  117:            std::cout << "Closing connection. Bye!\n";
        2:  118:            break;
        -:  119:        }
        -:  120:
       10:  121:        command += '\n'; // Adding newline to match server expectations
        -:  122:
        -:  123:        // Sending command to the server:
       10:  124:        ssize_t bytes_sent = send(sock, command.c_str(), command.size(), 0);
       10:  125:        if (bytes_sent < 0)
        -:  126:        {
    #####:  127:            perror("Send failed");
    #####:  128:            break;
        -:  129:        }
        -:  130:
        -:  131:        // Getting response from the server:
       10:  132:        char buffer[1024] = {0};
       10:  133:        ssize_t bytes_received = recv(sock, buffer, sizeof(buffer) - 1, 0);
       10:  134:        if (bytes_received <= 0)
        -:  135:        {
        1:  136:            perror("recv failed");
        1:  137:            break;
        -:  138:        }
        9:  139:        buffer[bytes_received] = '\0';
        9:  140:        std::cout << "Server returned: " << buffer << "\n";
       21:  141:    }
        -:  142:
        3:  143:    close(sock);
        3:  144:    return 0;
        3:  145:}
