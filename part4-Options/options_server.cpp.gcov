        -:    0:Source:options_server.cpp
        -:    0:Graph:options_server.gcno
        -:    0:Data:options_server.gcda
        -:    0:Runs:5
        -:    1:#include <iostream>
        -:    2:#include <cstring>
        -:    3:#include <unistd.h>
        -:    4:#include <arpa/inet.h>
        -:    5:#include <sys/socket.h>
        -:    6:#include <sys/select.h>
        -:    7:#include <set>
        -:    8:#include <algorithm>
        -:    9:#include <signal.h>
        -:   10:#include <sstream>
        -:   11:#include <getopt.h>
        -:   12:#include <errno.h>
        -:   13:
        -:   14:int tcp_port=-1;
        -:   15:int udp_port=-1;
        -:   16:int timeout_seconds=0;
        -:   17:
        -:   18:bool shutdown_requested = false;
        -:   19:
    #####:   20:void handle_shutdown(int) {
    #####:   21:    shutdown_requested = true;
    #####:   22:}
        -:   23:
        1:   24:void handle_timeout(int) {
        1:   25:    std::cout << "[INFO] Timeout reached. Shutting down.\n";
        1:   26:    shutdown_requested = true;
        1:   27:}
        -:   28:
        -:   29:
        5:   30:int main(int argc, char* argv[]) {
        5:   31:    signal(SIGPIPE, SIG_IGN); 
        5:   32:    signal(SIGINT, handle_shutdown);
        -:   33:
        -:   34:  
        5:   35:    unsigned long long hydrogen_count = 0;
        5:   36:    unsigned long long oxygen_count = 0;
        5:   37:    unsigned long long carbon_count = 0;
        -:   38:
        -:   39:   int opt;
       24:   40:    while ((opt = getopt(argc, argv, "o:c:h:t:T:U:")) != -1) {
       20:   41:        switch (opt) {
        9:   42:            case 'o': oxygen_count = std::stoull(optarg); break;
        9:   43:            case 'c': carbon_count = std::stoull(optarg); break;
        6:   44:            case 'h': hydrogen_count = std::stoull(optarg); break;
       12:   45:            case 't': timeout_seconds = std::stoi(optarg); break;
       12:   46:            case 'T': tcp_port = std::stoi(optarg); break;
        9:   47:            case 'U': udp_port = std::stoi(optarg); break;
        1:   48:            default:
        1:   49:                std::cerr << "Usage: " << argv[0] << " -T <tcp_port> -U <udp_port> [-t <timeout>] [-o <oxygen>] [-c <carbon>] [-h <hydrogen>]\n";
        1:   50:                return 1;
        -:   51:        }
        -:   52:    }
        -:   53:
        4:   54:    if (timeout_seconds > 0) {
        3:   55:        signal(SIGALRM, handle_timeout);
        3:   56:        alarm(timeout_seconds);
        -:   57:    }
        -:   58:
        4:   59:    if (tcp_port == -1 || udp_port == -1) {
        2:   60:        std::cerr << "[ERROR] Both -T <tcp_port> and -U <udp_port> are required.\n";
        2:   61:        return 1;
        -:   62:    }
        -:   63:
        -:   64:
        -:   65:    // Create the socket TCP:
        2:   66:    int server_fd = socket(AF_INET, SOCK_STREAM, 0);
        2:   67:    if (server_fd < 0) {
    #####:   68:        perror("Socket failed");
    #####:   69:        return 1;
        -:   70:    }
        -:   71:
        -:   72:    // Create the UDP socket:
        2:   73:    int udp_fd = socket(AF_INET, SOCK_DGRAM, 0);
        2:   74:    if (udp_fd < 0) {
    #####:   75:        perror("UDP socket failed");
    #####:   76:        return 1;
        -:   77:    }
        -:   78:
        -:   79:   
        -:   80:
        -:   81:    // Define the address's structure of the server:
        -:   82:    sockaddr_in address;
        2:   83:    std::memset(&address, 0, sizeof(address));
        2:   84:    address.sin_family = AF_INET;
        2:   85:    address.sin_addr.s_addr = INADDR_ANY;
        2:   86:    address.sin_port = htons(tcp_port);
        -:   87:
        -:   88:    sockaddr_in udp_addr;
        2:   89:    std::memset(&udp_addr, 0, sizeof(udp_addr));
        2:   90:    udp_addr.sin_family = AF_INET;
        2:   91:    udp_addr.sin_addr.s_addr = INADDR_ANY;
        2:   92:    udp_addr.sin_port = htons(udp_port); // same port as TCP
        -:   93:
        -:   94:    //bind to the TCP :
        2:   95:    int bind_result = bind(server_fd, (sockaddr *)&address, sizeof(address));
        2:   96:    if (bind_result < 0){
    #####:   97:        perror("TCP bind failed");
    #####:   98:        close(server_fd);
    #####:   99:        return 1;
        -:  100:    }
        -:  101:
        -:  102:    //bind to the UDP :
        2:  103:    if (bind(udp_fd, (sockaddr*)&udp_addr, sizeof(udp_addr)) < 0) {
    #####:  104:        perror("UDP bind failed");
    #####:  105:        close(server_fd);
    #####:  106:        close(udp_fd);
    #####:  107:        return 1;
        -:  108:    }
        -:  109:
        -:  110:
        -:  111:    // Starts the listen action:
        2:  112:    int listen_result = listen(server_fd, 5);
        2:  113:    if (listen_result < 0){
    #####:  114:        perror("Listen failed");
    #####:  115:        close(server_fd);
    #####:  116:        return 1;
        -:  117:    }
        2:  118:    std::cout << "Server is listening on TCP port " << tcp_port
        2:  119:          << " and UDP port " << udp_port << "...\n";
        -:  120:
        -:  121:    // Set of clients:
        2:  122:    std::set<int> clients;
        -:  123:
        -:  124:    // Infinite loop-for IO MUX:
       25:  125:    while (!shutdown_requested) {
        -:  126:        fd_set readfds; // Struct that includes the sockets's list
      408:  127:        FD_ZERO(&readfds); // Starting from empty list
       24:  128:        FD_SET(server_fd, &readfds); // Adding the listening socket to the readfds
       24:  129:        int max_fd = server_fd;
        -:  130:
       24:  131:        FD_SET(udp_fd, &readfds);
       24:  132:        if (udp_fd > max_fd) {
       24:  133:            max_fd = udp_fd;
        -:  134:        }
        -:  135:
       24:  136:        FD_SET(STDIN_FILENO, &readfds);
       24:  137:        if (STDIN_FILENO > max_fd) {
    #####:  138:            max_fd = STDIN_FILENO;
        -:  139:        }
        -:  140:
        -:  141:        // Adding all the clients:
       32:  142:        for (int client_fd : clients) {
        8:  143:            FD_SET(client_fd, &readfds);
        8:  144:            if (client_fd > max_fd){
        8:  145:                max_fd = client_fd;
        -:  146:            }
        -:  147:        }
        -:  148:
        -:  149:        // Active waiting until one of the sockets will be ready for reading:
       24:  150:       int activity = select(max_fd + 1, &readfds, nullptr, nullptr, nullptr);
       24:  151:        if (activity < 0 && shutdown_requested) {
        1:  152:            break; 
        -:  153:        }
       23:  154:        if (activity < 0) {
    #####:  155:            perror("Select error");
    #####:  156:            break;
        -:  157:        }
        -:  158:
        -:  159:
       23:  160:        std::set<int> disconnected;
        -:  161:
        -:  162:        // If a new connection is coming:
       23:  163:        if (FD_ISSET(server_fd, &readfds)) {
        -:  164:            sockaddr_in client_addr;
        2:  165:            socklen_t client_len = sizeof(client_addr);
        2:  166:            int new_client = accept(server_fd, (sockaddr*)&client_addr, &client_len);
       2*:  167:            if (new_client < 0) {
    #####:  168:                perror("Accept failed");
    #####:  169:                continue;
        -:  170:            }
        2:  171:            clients.insert(new_client);
        2:  172:            std::cout << "[INFO] New client connected: " << inet_ntoa(client_addr.sin_addr) << "\n";
        -:  173:        }
        -:  174:
       23:  175:       if (FD_ISSET(udp_fd, &readfds)) {
        8:  176:            char buffer[1024] = {0};
        -:  177:            sockaddr_in client_addr;
        8:  178:            socklen_t client_len = sizeof(client_addr);
        8:  179:            ssize_t bytes_received = recvfrom(udp_fd, buffer, sizeof(buffer) - 1, 0,
        -:  180:                                            (sockaddr*)&client_addr, &client_len);
        -:  181:
        8:  182:            if (bytes_received > 0) {
        8:  183:                buffer[bytes_received] = '\0';
        8:  184:                std::string command(buffer);
        -:  185:
        8:  186:                if (timeout_seconds > 0) {
        8:  187:                    alarm(timeout_seconds);
        -:  188:                }
        -:  189:
        -:  190:
        8:  191:                command.erase(std::remove(command.begin(), command.end(), '\n'), command.end());
        8:  192:                command.erase(std::remove(command.begin(), command.end(), '\r'), command.end());
        -:  193:
        8:  194:                std::istringstream iss(command);
        8:  195:                std::string action, molecule;
        -:  196:                unsigned long long amount;
        -:  197:
        8:  198:                if (!(iss >> action >> molecule >> amount) || action != "DELIVER" || amount <= 0) {
        2:  199:                    std::string response = "CANNOT_DELIVER";
        2:  200:                    sendto(udp_fd, response.c_str(), response.size(), 0, 
        -:  201:                        (sockaddr*)&client_addr, client_len);
        2:  202:                    continue;
        2:  203:                }
        -:  204:
        -:  205:                // The requiers molecules:
        6:  206:                unsigned long long need_H = 0, need_O = 0, need_C = 0;
        6:  207:                if (molecule == "WATER") {
        2:  208:                    need_H = 2 * amount;
        2:  209:                    need_O = 1 * amount;
        -:  210:                }
        4:  211:                else if (molecule == "CARBON_DIOXIDE") {
        1:  212:                    need_C = 1 * amount;
        1:  213:                    need_O = 2 * amount;
        -:  214:                } 
        3:  215:                else if (molecule == "GLUCOSE") {
        1:  216:                    need_C = 6 * amount;
        1:  217:                    need_H = 12 * amount;
        1:  218:                    need_O = 6 * amount;
        -:  219:                } 
        2:  220:                else if (molecule == "ALCOHOL") {
        1:  221:                    need_C = 2 * amount;
        1:  222:                    need_H = 6 * amount;
        1:  223:                    need_O = 1 * amount;
        -:  224:                } 
        -:  225:                else {
        1:  226:                    std::string response = "CANNOT_DELIVER";
        1:  227:                    sendto(udp_fd, response.c_str(), response.size(), 0, 
        -:  228:                        (sockaddr*)&client_addr, client_len);
        1:  229:                    continue;;
        1:  230:                }
        -:  231:
        5:  232:                if (hydrogen_count >= need_H && oxygen_count >= need_O && carbon_count >= need_C) {
        4:  233:                    hydrogen_count -= need_H;
        4:  234:                    oxygen_count -= need_O;
        4:  235:                    carbon_count -= need_C;
        -:  236:
        4:  237:                    std::cout << "[INFO] UDP request received: DELIVER " << molecule << "\n";
        4:  238:                    std::cout << "[INFO] Atoms: H=" << hydrogen_count 
        4:  239:                            << ", O=" << oxygen_count 
        4:  240:                            << ", C=" << carbon_count << "\n";
        -:  241:
        4:  242:                    std::string response = "DELIVERED";
        4:  243:                    sendto(udp_fd, response.c_str(), response.size(), 0, 
        -:  244:                        (sockaddr*)&client_addr, client_len);
        4:  245:                } else {
        1:  246:                    std::string response = "CANNOT_DELIVER";
        1:  247:                    sendto(udp_fd, response.c_str(), response.size(), 0, 
        -:  248:                        (sockaddr*)&client_addr, client_len);
        1:  249:                }
       17:  250:            }
        -:  251:        }
        -:  252:
       20:  253:        if (FD_ISSET(STDIN_FILENO, &readfds)) {
        5:  254:            std::string line;
        5:  255:            std::getline(std::cin, line);
        5:  256:            std::istringstream iss(line);
        -:  257:
        5:  258:            std::string cmd, drink;
        5:  259:            if (!(iss >> cmd >> drink) || cmd != "GEN") {
        1:  260:                std::cout << "[ERROR] Invalid command. Use: GEN <SOFT DRINK|VODKA|CHAMPAGNE>\n";
        1:  261:                continue;  
        -:  262:            }
        -:  263:
        4:  264:            int can_make = 0;
        4:  265:            if (drink == "SOFT" || drink == "SOFT_DRINK" || drink == "SOFTDRINK") {
        1:  266:                unsigned long long h = hydrogen_count / 14;
        1:  267:                unsigned long long o = oxygen_count / 9;
        1:  268:                unsigned long long c = carbon_count / 7;
        1:  269:                can_make = std::min({h, o, c});
        1:  270:                std::cout << "Can make " << can_make << " SOFT DRINK(s)\n";
        3:  271:            } else if (drink == "VODKA") {
        1:  272:                unsigned long long h = hydrogen_count / 20;
        1:  273:                unsigned long long o = oxygen_count / 8;
        1:  274:                unsigned long long c = carbon_count / 8;
        1:  275:                can_make = std::min({h, o, c});
        1:  276:                std::cout << "Can make " << can_make << " VODKA(s)\n";
        2:  277:            } else if (drink == "CHAMPAGNE") {
        1:  278:                unsigned long long h = hydrogen_count / 8;
        1:  279:                unsigned long long o = oxygen_count / 4;
        1:  280:                unsigned long long c = carbon_count / 3;
        1:  281:                can_make = std::min({h, o, c});
        1:  282:                std::cout << "Can make " << can_make << " CHAMPAGNE(s)\n";
        -:  283:            } else {
        1:  284:                std::cout << "[ERROR] Unknown drink type.\n";
        -:  285:            }
        8:  286:        }
        -:  287:
        -:  288:
        -:  289:
       28:  290:        for (int client_fd : clients) {
       10:  291:            if (FD_ISSET(client_fd, &readfds)) {
        8:  292:                char buffer[1024] = {0};
        8:  293:                int bytes_received = recv(client_fd, buffer, sizeof(buffer) - 1, 0);
        -:  294:
        8:  295:                if (bytes_received <= 0) {
        1:  296:                    std::cout << "[INFO] Client disconnected.\n";
        1:  297:                    close(client_fd);
        1:  298:                    disconnected.insert(client_fd);
        4:  299:                    continue;
        -:  300:                }
        -:  301:
        7:  302:                std::string command(buffer);
        -:  303:
        7:  304:                if (timeout_seconds > 0) {
        7:  305:                    alarm(timeout_seconds);
        -:  306:                }
        -:  307:
        7:  308:                command.erase(std::remove(command.begin(), command.end(), '\n'), command.end());
        7:  309:                command.erase(std::remove(command.begin(), command.end(), '\r'), command.end());
        -:  310:
        -:  311:                // Checking if the client request to exit;
       7*:  312:                if (command == "EXIT") {
    #####:  313:                    close(client_fd);
    #####:  314:                    disconnected.insert(client_fd);
    #####:  315:                    continue;
        -:  316:                }
        -:  317:
        -:  318:                // Checking if the client request to close all of th network:
        7:  319:                if (command == "SHUTDOWN") {
        1:  320:                    std::cout << "[INFO] Shutdown command received from client.\n";
        1:  321:                    shutdown_requested = true;
        1:  322:                    close(client_fd);
        1:  323:                    disconnected.insert(client_fd);
        1:  324:                    break;
        -:  325:                }
        -:  326:
        6:  327:                std::istringstream iss(command);
        6:  328:                std::string action, atom_type;
        6:  329:                long long amount = -1;
        -:  330:
        6:  331:                if (!(iss >> action >> atom_type >> amount)) {
        1:  332:                    std::string error_msg = "ERROR: Usage: ADD <ATOM_TYPE> <POSITIVE_AMOUNT>\n";
        1:  333:                    send(client_fd, error_msg.c_str(), error_msg.size(), 0);
        1:  334:                    continue;
        1:  335:                }
        -:  336:
        5:  337:                if (action != "ADD" || amount <= 0) {
        1:  338:                    std::string error_msg = "ERROR: Invalid command or non-positive amount.\n";
        1:  339:                    send(client_fd, error_msg.c_str(), error_msg.size(), 0);
        1:  340:                    continue;
        1:  341:                }
        -:  342:
        4:  343:                unsigned long long* target = nullptr;
        4:  344:                if (atom_type == "HYDROGEN") {
        1:  345:                    target = &hydrogen_count;
        -:  346:                }
        3:  347:                else if (atom_type == "OXYGEN") {
        1:  348:                    target = &oxygen_count;
        -:  349:                }
        2:  350:                else if (atom_type == "CARBON") {
        1:  351:                    target = &carbon_count;
        -:  352:                }
        -:  353:                else {
        1:  354:                    std::string error_msg = "ERROR: Unknown atom type. Use HYDROGEN, OXYGEN, or CARBON.\n";
        1:  355:                    send(client_fd, error_msg.c_str(), error_msg.size(), 0);
        1:  356:                    continue;
        1:  357:                }
        -:  358:
        3:  359:                *target += static_cast<unsigned long long>(amount);
        3:  360:                std::cout << "[INFO] Atoms: H=" << hydrogen_count
        3:  361:                          << ", O=" << oxygen_count
        3:  362:                          << ", C=" << carbon_count << "\n";
        -:  363:
        3:  364:                unsigned int response = static_cast<unsigned int>(*target);
        3:  365:                send(client_fd, &response, sizeof(response), 0);
       16:  366:            }
        -:  367:        }
        -:  368:
       21:  369:        for (int fd : disconnected) {
        2:  370:            clients.erase(fd);
        -:  371:        }
       23:  372:    }
        -:  373:
       2*:  374:    for (int fd : clients){
    #####:  375:        close(fd);
        -:  376:    }
        2:  377:    close(server_fd);
        2:  378:    close(udp_fd);
        -:  379:
        2:  380:    std::cout << "[INFO] Server shut down.\n";
        2:  381:    return 0;
        -:  382:}
